apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'

group = 'org.neptunepowered'
archivesBaseName = project.name.toLowerCase()

sourceCompatibility = '1.6'
targetCompatibility = '1.6'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        name 'neptune-temp'
        url 'http://www.neptunepowered.org/temprepo/'
    }
    maven {
        name = 'mcstats.org releases'
        url = 'http://repo.mcstats.org/content/repositories/releases/'
    }
    maven {
        name = 'mcstats.org snapshots'
        url = 'http://repo.mcstats.org/content/repositories/snapshots/'
    }
}

// Mixins
ext {
    mixinSrg = new File(project.buildDir, 'tmp/mixins/mixins.srg')
    mixinRefMap = new File(project.buildDir, "tmp/mixins/mixins.${implementation.toLowerCase()}.refmap.json")
}

// Compile options
compileJava {
    options.compilerArgs += [
            '-Xlint:-processing',
            "-AoutSrgFile=${project.mixinSrg.canonicalPath}",
            "-AoutRefMapFile=${project.mixinRefMap.canonicalPath}",
            "-AreobfSrgFile=${project.file('build/srgs/mcp-srg.srg').canonicalPath}"
    ]
}

// Copy the current srgs to the build dir so the user doesn't have to go hunting for them
task copySrgs(type: Copy, dependsOn: 'genSrgs') {
    from minecraftPlugin.delayedFile('{SRG_DIR}')

    include '**/*.srg'
    into 'build/srgs'
}
setupDecompWorkspace.dependsOn copySrgs
setupDevWorkspace.dependsOn copySrgs
compileJava.dependsOn copySrgs

// Configure reobfuscation for mixins
reobf.doFirst {
    if (project.mixinSrg.exists()) {
        addExtraSrgFile project.mixinSrg
    }
}

jar {
    from project.mixinRefMap
}

ext.minecraftVersion = '1.8'
minecraft {
    if (project.ext.has('forgeVersion')) {
        version = "$minecraftVersion-$forgeVersion"
    } else {
        version = minecraftVersion
    }

    mappings = 'snapshot_20150717'
}

javadoc {
    options.encoding = 'UTF-8'
    options.charSet = 'UTF-8'
}

task sourceJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourceJar
    archives javadocJar
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.8'
}
